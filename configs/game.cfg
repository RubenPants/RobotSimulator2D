[BOT]
# Speed of bot when driving straight expressed in m/s [def=0.5]
driving speed = 0.5
# Radius of the bot expressed in meters [def=0.1]
radius = 0.1
# Speed of bot when turning expressed in radians per second [def=3*pi/4]
turning speed = 13 * 3.141593 / 16

[CONTROL]
# Number of games on which a single genome is evaluated [def=8]
agent batch = 8
# Number of seconds it takes for one game to complete [def=100]
duration = 100
# Max ID of game (starting from 1) [def=1000]
max id = 1000
# Max ID of evaluation game (starting from max_id) [def=1200]
max eval-id = 1200
# Time every component in the full pipeline (only used to find bottlenecks) [def=0 (False)]
time all = 0
# Number of frames each second  [def=20]
fps = 20

[CREATION]
# Pixel-to-meters: number of pixels that represent one meter  [def=50]
p2m = 50
# Number of meters the x-axis represents [def=14]
x-axis = 14
# Number of meters the y-axis represents [def=14]
y-axis = 14
# Minimal width for one room: int((2 * AXIS_X + 1) / 5) [def=5]
min width = 5
# Number of times a room is tried to be added to the room [def=8]
room attempts = 8
# Number of games created: 1000 to train, 200 to evaluate  [def=1200]
game amount = 1200
# The maximum percentage of tiles one room may contain [def=0.2]
filled ratio = 0.2

[NOISE]
# Alpha in Gaussian distribution for time noise, max 0.02s deviation [def=0.005]
time = 0.005
# Alpha in Gaussian distribution for angular sensor, max 0.7Â° deviation [def=0.001]
angle = 0.001
# Alpha in Gaussian distribution for distance sensor, max ~1.5cm deviation [def=0.005]
distance = 0.005
# Alpha in Gaussian distribution for proximity sensor, max ~1.5cm deviation [def=0.005]
proximity = 0.005

[SENSOR]
# Distance a ray-sensor reaches, expressed in meters [def=1.5]
ray distance = 1.5

[TARGET]
# Target is reached when within this range, expressed in meters [def=0.5]
reached = 0.5
