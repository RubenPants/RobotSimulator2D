[NEAT]
# The function used to compute the termination criterion from the set of genome fitness (early stopping) [UNUSED]
fitness_criterion = max
# When the fitness computed by fitness_criterion meets or exceeds this threshold, the evolution process will terminate [UNUSED]
fitness_threshold = 1
# True: consider fitness_criterion and fitness_threshold | False: ignore those
no_fitness_termination = True
# Number of individuals in each generation
pop_size = 128
# True: when all species become distinct due to stagnation, a new random population will be created | False: raise CompleteExtinctionException
reset_on_extinction = True

[DefaultStagnation]
# The function used to compute the species fitness
species_fitness_func = mean
# If a specie has not shown improvement in more than this number of generations, it will be considered stagnant and removed
max_stagnation = 10
# The number of species that will be protected from stagnation; mainly intended to prevent total extinctions cause by all species becoming stagnant before new species arise
# Since only interested in the best (final) solution, and still enable crossover, the best performing species will remain
species_elitism = 1

[DefaultReproduction]
# The number of most fit individuals in each species that will be preserved as-is from one generation to the next
elitism = 2
# The fraction for each species allowed to reproduce each generation
survival_threshold = 0.2
# The minimum number of genomes per species after reproduction
min_species_size = 2

[DefaultGenome]
# Number of input nodes, which are represented by all the sensors: [5x proximity_sensor, 2x angular_sensor, 1x distance_sensor]
num_inputs = 8
# Number of hidden nodes to add to each genome in the initial population [UNUSED]
num_hidden = 0
# Number of output nodes, which are the wheels: [left_wheel, right_wheel]
num_outputs = 2
# Initial connectivity of newly-created genomes, in this case, there is a 50% percent chance for each input node to be fully connected to all output nodes
initial_connection = partial_direct 0.5
# Generated networks will not be allowed to have recurrent connections (must be feedforward)
feed_forward = True
# Full weight of disjoint and excess nodes on determining genomic distance
compatibility_disjoint_coefficient = 1.0
# Only .6 weight of the connection-values on determining genomic distance
compatibility_weight_coefficient = 0.6
# Probability of adding a connection between existing nodes during mutation
conn_add_prob = 0.2
# Probability of deleting an existing connection during mutation
conn_delete_prob = 0.2
# Probability of adding a node during mutation
node_add_prob = 0.1
# Probability of removing a node during mutation
node_delete_prob = 0.1
# Initial node activation function
activation_default = tanh
# All possible activation functions between whom can be switched during mutation [UNUSED]
activation_options = tanh
# Probability of changing the activation function [UNUSED]
activation_mutate_rate = 0.0
# The default aggregation function attribute assigned to new nodes, in this case, all the nodes received inputs get summed and then weighted to the node's specific threshold
aggregation_default = sum
# Aggregation options between whom can be mutated [UNUSED]
aggregation_options = sum
# Probability of mutating towards another aggregation_option [UNUSED]
aggregation_mutate_rate = 0.0
# The mean of the gaussian distribution, used to select the bias attribute values for new nodes
bias_init_mean = 0.0
# Standard deviation of the gaussian distribution, used to select the bias attribute values of new nodes (Gaussian between -1.5 and 1.5)
bias_init_stdev = 0.5
# The probability that mutation will replace the bias of a node with a (completely) newly chosen random value
bias_replace_rate = 0.1
# The probability that mutation will change the bias of a node by adding a random value
bias_mutate_rate = 0.5
# The standard deviation of the zero-centered gaussian distribution from which a bias value mutation is drawn (Gaussian between -0.6 and 0.6)
bias_mutate_power = 0.2
# The maximum allowed bias value, biases above this threshold will be clamped to this value
bias_max_value = 5
# The minimum allowed bias value, biases below this threshold will be clamped to this value
bias_min_value = -5
# By this value the response of the node is multiplied before forwarding it to the following nodes [UNUSED]
response_init_mean = 1.0
# Standard deviation of the gaussian distribution [UNUSED]
response_init_stdev = 0.0
# The probability that mutation will replace the response multiplier of a node [UNUSED]
response_replace_rate = 0.0
# Probability of changing the response multiplier [UNUSED]
response_mutate_rate = 0.0
# Standard deviation of the zero-centered gaussian distribution from which a response multiplier mutation is drawn [UNUSED]
response_mutate_power = 0.0
# Maximum allowed response multiplier [UNUSED]
response_max_value = 1
# Minimum allowed response multiplier [UNUSED]
response_min_value = -1
# The maximum allowed weight value, weights above this value will be clamped to this value (arbitrarily chosen)
weight_max_value = 2
# The minimum allowed weight value, weights below this value will be clamped to this value (arbitrarily chosen)
weight_min_value = -2
# Mean of the gaussian distribution used to select the weight attribute values for new connections
weight_init_mean = 0.0
# Standard deviation of the gaussian distribution used to select the weight attributes values for new connections (Gaussian between -1.5 and 1.5)
weight_init_stdev = 0.5
# Probability of a weight (connection) to mutate
weight_mutate_rate = 0.8
# Probability of assigning a completely new value to the connection-weight, based on weight_init_mean and weight_init_stdev
weight_replace_rate = 0.1
# The standard deviation of the zero-centered gaussian distribution from which a weight value mutation is drawn (Gaussian between -0.6 and 0.6)
weight_mutate_power = 0.2
# Enable the algorithm to disable (and re-enable) existing connections
enabled_default = True
# The probability that mutation will replace the enabled status (if the connection is used or not) of a connection
enabled_mutate_rate = 0.05

[DefaultSpeciesSet]
# Individuals whose genetic distance is less than this threshold are considered to be in the same species
compatibility_threshold = 2.0

[EVALUATION]
# Fitness functions [distance, distance_time, novelty, path, path_time, quality_diversity]
fitness = path
# Function used to combine the fitness-values across different games, choices are: min, avg, max, gmean (geometric mean)
fitness_comb = gmean
# Number of nearest neighbors taken into account for a NN-utilizing fitness function
nn_k = 3